parameters: 
  - name: osmArc
    type: boolean
    default: true

steps:
  - script: |
      kubectl get pods -A
    displayName: Get all pods to debug
    condition: always()
  - script: |
      #Using kubectl logs with "-l" doesn't give entire output
      export OSM_CONTROLLER_NAME=$(kubectl get pods -n $(release.namespace) --selector app=osm-controller --no-headers | awk '{print $1}' | head -n1)
      kubectl logs $OSM_CONTROLLER_NAME osm-controller -n $(release.namespace)
    displayName: Get logs from osm-controller container
    condition: always()
  - script: |
      kubectl describe pod -l app=osm-controller -n $(release.namespace)
    displayName: Describe osm-controller pod 
    condition: always()
  - script: |
      #Using kubectl logs with "-l" doesn't give entire output
      export OSM_INJECTOR_NAME=$(kubectl get pods -n $(release.namespace) --selector app=osm-injector --no-headers | awk '{print $1}' | head -n1)
      kubectl logs $OSM_INJECTOR_NAME osm-injector -n $(release.namespace)
    displayName: Get logs from osm-injector container
    condition: always()
  - script: |
      kubectl describe pod -l app=osm-injector -n $(release.namespace)
    displayName: Describe osm-injector pod 
    condition: always()
  - script: |
      #Using kubectl logs with "-l" doesn't give entire output
      export OSM_BOOTSTRAP_NAME=$(kubectl get pods -n $(release.namespace) --selector app=osm-bootstrap --no-headers | awk '{print $1}' | head -n1)
      kubectl logs $OSM_BOOTSTRAP_NAME osm-bootstrap -n $(release.namespace)
    displayName: Get logs from osm-bootstrap container
    condition: always()
  - script: |
      kubectl describe pod -l app=osm-bootstrap -n $(release.namespace)
    displayName: Describe osm-bootstrap pod 
    condition: always()
  - script: |
      #Using kubectl logs with "-l" doesn't give entire output
      export OSM_METRICS_AGENT_NAME=$(kubectl get pods -n $(release.namespace) --selector app=osm-metrics-agent --no-headers | awk '{print $1}' | head -n1)
      echo "##vso[task.setvariable variable=OSM_METRICS_POD]$OSM_METRICS_AGENT_NAME"
    displayName: Get osm-metrics-agent pod name
    condition: eq('${{ parameters.osmArc }}', 'True')
  - script: |
      #Using kubectl logs with "-l" doesn't give entire output
      kubectl logs $OSM_METRICS_POD mdm -n $(release.namespace)
    displayName: Get logs from mdm container in osm-metrics-pod
    condition: eq('${{ parameters.osmArc }}', 'True')
  - script: |
      #Using kubectl logs with "-l" doesn't give entire output
      kubectl logs $OSM_METRICS_POD msi-adapter -n $(release.namespace)
    displayName: Get logs from msi-adapter container in osm-metrics-pod
    condition: eq('${{ parameters.osmArc }}', 'True')
  - script: |
      #Using kubectl logs with "-l" doesn't give entire output
      kubectl logs $OSM_METRICS_POD prom-mdm-converter -n $(release.namespace)
    displayName: Get logs from prom-mdm-converter container in osm-metrics-pod
    condition: eq('${{ parameters.osmArc }}', 'True')
  - script: |
      #Using kubectl logs with "-l" doesn't give entire output
      kubectl logs $OSM_METRICS_POD telegraf -n $(release.namespace)
    displayName: Get logs from telegraf container in osm-metrics-pod
    condition: eq('${{ parameters.osmArc }}', 'True')
  - script: |
      kubectl describe pod -l app=osm-metrics-agent -n $(release.namespace)
    displayName: Describe osm-metrics-agent pod 
    condition: eq('${{ parameters.osmArc }}', 'True')
  - script: |
      export DNS_POD_1=$(kubectl get pods -n kube-system --selector k8s-app=kube-dns --no-headers | awk '{print $1}' | sed -n '1 p')
      kubectl logs $DNS_POD_1 -n kube-system
    displayName: Get logs from kube-dns pod 1
    condition: always()
  - script: |
      export DNS_POD_2=$(kubectl get pods -n kube-system --selector k8s-app=kube-dns --no-headers | awk '{print $1}' | sed -n '2 p')
      kubectl logs $DNS_POD_2 -n kube-system
    displayName: Get logs from kube-dns pod 2
    condition: always()
  - script: |
      helm history osm -n $(release.namespace)
    displayName: Get Helm history
    condition: eq('${{ parameters.osmArc }}', 'True')
  - script: |
      kubectl get events -A
    displayName: List all events
    condition: always()
  - script: |
      kubectl get deployments -A
    displayName: List all deployments
    condition: always()
  - script: |
      kubectl get pods -n azure-arc -o yaml
    displayName: Get azure-arc pods
    condition: eq('${{ parameters.osmArc }}', 'True')
  - script: |
      kubectl get deployments -n azure-arc -o yaml
    displayName: Get azure-arc deployments
    condition: eq('${{ parameters.osmArc }}', 'True')
  - script: |
      HELM_OUTPUT=$(helm ls -o json --namespace arc-osm-system | jq -r '.[].chart')
      if [[ "$HELM_OUTPUT" != "osm-arc-$CHART_VERSION" ]]; then
        echo "Incorrect chart version" && exit 1
      fi 
    displayName: Ensure that helm chart version is still correct
    condition: eq('${{ parameters.osmArc }}', 'True')
